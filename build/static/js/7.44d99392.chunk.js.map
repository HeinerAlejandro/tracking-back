{"version":3,"sources":["components/Profile/ImageProfile.js","components/Profile/ModiFyPasswordComponent.js","components/Profile/ModifyNames.js","components/Profile/index.js","views/UserInterfacePage/ProfileView/index.js"],"names":["es_form","Item","token","localStorage","getItem","type","backend","ImageProfile","state","loading","handleChange","info","file","status","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","getBase64","originFileObj","imageUrl","_this","props","setUser","setState","react_default","a","createElement","Fragment","reactstrap_es","upload","name","action","URL_PROFILE_IMAGE","onChange","this","showUploadList","listType","headers","Authorization","concat","icon","src","image","style","width","Component","FormItem","ModiFyPasswordComponent","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","data_reset","JSON","stringify","new_password1","getFieldValue","new_password2","old_password","reset_pass","then","value","compareToFirstPassword","rule","validateToNextPassword","validateFields","force","fieldsError","getFieldDecorator","onSubmit","layout","className","ModiFyPasswordComponent_FormItem","rules","required","message","validator","size","prefix","color","placeholder","onBlur","handleConfirmBlur","disabled","getFieldsError","keys","some","field","htmlType","React","WrappedChangePasswordForm","create","ModifyNamesComponent","data_names","first_name","last_name","reset_names","ModifyNames_FormItem","initialValue","fn","ln","WrappedChangeNamesForm","Profile","xs","lg","ImageProfile_ImageProfile","ModifyNames","Profile_ModiFyPasswordComponent","ProfileView","components_Profile","ImageUrl","resetPassword","resetNames","mapDispatchToProps","connect","data_user"],"mappings":"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","file":"static/js/7.44d99392.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { \r\n    Form,\r\n    Upload,\r\n    Icon,\r\n    message } from 'antd'\r\n\r\nimport { URL_PROFILE_IMAGE } from '../../constants/withPanel'\r\n\r\nimport { Card } from 'reactstrap';\r\n\r\nconst FormItem = Form.Item\r\n\r\nfunction getBase64(img, callback) {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('load', () => callback(reader.result));\r\n    reader.readAsDataURL(img);\r\n}\r\n\r\nconst token = localStorage.getItem('token')\r\nconst type = localStorage.getItem('type')\r\nconst backend = localStorage.getItem('backend') === null?'':localStorage.getItem('backend')\r\n\r\nexport default class ImageProfile extends Component {\r\n\r\n  state = {\r\n    loading : false\r\n  }\r\n\r\n  handleChange = (info) => {\r\n    if (info.file.status === 'uploading') {\r\n      this.setState({ loading: true });\r\n      return;\r\n    }\r\n    if (info.file.status === 'done') {\r\n      // Get this url from response in real world.\r\n      getBase64(info.file.originFileObj, imageUrl => {\r\n        this.props.setUser({imageUrl})\r\n        this.setState({\r\n        loading: false,\r\n      })});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h3>Agregue una foto de perfil</h3>\r\n        <Card>\r\n            <Upload\r\n                name = 'avatar'\r\n                action = { URL_PROFILE_IMAGE }\r\n                onChange = { this.handleChange }\r\n                showUploadList = { false }\r\n                listType = \"picture-card\"\r\n                headers = {{\r\n                  Authorization : `${type} ${backend} ${token}`\r\n                }}\r\n            >\r\n              <div>\r\n                <Icon type = { this.state.loading ? 'loading' : 'plus' } />\r\n                <img \r\n                  src = { this.props.image ? this.props.image : 'resources/user-not-found.png' }\r\n                  style = {{ width : '75px' }}\r\n                />\r\n\r\n              </div>\r\n            </Upload>\r\n        </Card>\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport {   Card, CardBody, CardHeader, Col ,\r\n    FormText,Input,Button\r\n    ,Label } from 'reactstrap';\r\n\r\nimport { Form, Icon } from 'antd'\r\n\r\nconst FormItem = Form.Item\r\n\r\nfunction hasErrors(fieldsError) {\r\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n\r\nclass ModiFyPasswordComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            loading : false\r\n        }\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        this.setState({\r\n            loading : true\r\n        })\r\n\r\n        e.preventDefault();\r\n       \r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n          if (!err) {\r\n            const data_reset = JSON.stringify({\r\n              new_password1 : this.props.form.getFieldValue('n-password'),\r\n              new_password2 : this.props.form.getFieldValue('n-confirm'),\r\n              old_password : this.props.form.getFieldValue('old_password')\r\n            })\r\n          \r\n            let status = this.props.reset_pass(data_reset)\r\n\r\n            status.then(value => this.setState({loading:false}))\r\n          }\r\n        });\r\n    }\r\n        \r\n    compareToFirstPassword = (rule, value, callback) => {\r\n        const form = this.props.form;\r\n    \r\n        if (value && value !== form.getFieldValue('n-password')) {\r\n          callback('Las 2 contraseñas son diferentes');\r\n        } else {\r\n          callback();\r\n        }\r\n      }\r\n    \r\n      validateToNextPassword = (rule, value, callback) => {\r\n        const form = this.props.form;\r\n        if (value) {\r\n          form.validateFields(['n-confirm'], { force: true });\r\n        }\r\n        callback();\r\n    }\r\n\r\n    render(){\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Card>\r\n                <CardHeader>\r\n                    Modificar Contraseña\r\n                </CardHeader>\r\n\r\n                <CardBody>\r\n                    <Form \r\n                        onSubmit={this.handleSubmit}\r\n                        layout = 'vertical'\r\n                        className = 'formr'>\r\n            \r\n                        <FormItem>\r\n                            {getFieldDecorator('n-password', {\r\n                                rules: [{\r\n                                required: true, message: 'debes ingresar una contraseña',\r\n                            }, {\r\n                                validator: this.validateToNextPassword,\r\n                            }],\r\n                            })(\r\n                                <Input\r\n                                    type=\"password\" \r\n                                    size = 'large'\r\n                                    prefix = {\r\n                                        <Icon\r\n                                            type = 'lock'\r\n                                            style = {{color : 'gray'}}  \r\n                                        />\r\n                                    }\r\n                                    placeholder = 'contraseña'  \r\n                                />\r\n                        )}\r\n                    </FormItem>\r\n                    <FormItem>\r\n                        {getFieldDecorator('n-confirm', {\r\n                        rules: [{\r\n                            required: true, message: 'Confirma tu contraseña',\r\n                        }, {\r\n                            validator: this.compareToFirstPassword,\r\n                        }],\r\n                        })(\r\n                        <Input\r\n                            type=\"password\"\r\n                            size = 'large'\r\n                            onBlur={this.handleConfirmBlur}\r\n                            prefix = {<Icon type = 'lock' style = {{color : 'gray'}} />} placeholder = 'verificacion' />\r\n                        )}\r\n                    </FormItem>\r\n                    \r\n                    <FormItem>\r\n                        {getFieldDecorator('old_password', {\r\n                        rules: [{\r\n                            required: true, message: 'Introduce tu contraseña actual',\r\n                        }],\r\n                        })(\r\n                        <Input\r\n                            type=\"password\"\r\n                            size = 'large'\r\n                            prefix = {<Icon type = 'lock' style = {{color : 'gray'}} />}\r\n                            placeholder = 'contraseña actual' />\r\n                        )}\r\n                    </FormItem>\r\n\r\n                    <FormItem>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            className = 'button-login-register'\r\n                            loading = {this.state.loading}\r\n                            disabled = {hasErrors(this.props.form.getFieldsError())}\r\n                            htmlType = 'submit'>\r\n                            Registrese\r\n                        </Button>\r\n                    </FormItem>\r\n                    </Form>\r\n                </CardBody>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nconst WrappedChangePasswordForm = Form.create()(ModiFyPasswordComponent)\r\n\r\nexport default WrappedChangePasswordForm\r\n","import {   Card, CardBody, CardHeader, Col ,\r\n    FormText,Input,Button\r\n    ,Label } from 'reactstrap';\r\n\r\nimport React from 'react'\r\n\r\nimport { Form, Icon } from 'antd'\r\n\r\nconst FormItem = Form.Item\r\n\r\nfunction hasErrors(fieldsError) {\r\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n\r\nclass ModifyNamesComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            loading : false\r\n        }\r\n    }\r\n    \r\n\r\n    handleSubmit = (e) => {\r\n\r\n        this.setState({loading:true})\r\n        e.preventDefault();\r\n       \r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n          if (!err) {\r\n            const data_names = JSON.stringify({\r\n              first_name : this.props.form.getFieldValue('first_name'),\r\n              last_name : this.props.form.getFieldValue('last_name'),\r\n            })\r\n          \r\n            let status = this.props.reset_names(data_names)\r\n\r\n            status.then(value => this.setState({loading:false}))\r\n          }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const { getFieldDecorator } = this.props.form;\r\n        \r\n        return (\r\n            <Card>\r\n                <CardHeader>\r\n                    Modificar Nombre\r\n                </CardHeader>\r\n\r\n                <CardBody>\r\n                    <Form \r\n                        onSubmit={this.handleSubmit}\r\n                        layout = 'horizontal'\r\n                        className = 'formr'>\r\n            \r\n                        <FormItem>\r\n                            {getFieldDecorator('first_name', {\r\n                                initialValue : this.props.fn,\r\n                                rules: [{\r\n                                required: true, message: 'debes ingresar tu primer nombre',\r\n                            }],\r\n                            })(\r\n                                <Input\r\n                                    type=\"text\" \r\n                                    \r\n                            \r\n                                    size = 'large'\r\n                                    prefix = {\r\n                                        <Icon\r\n                                            type = 'user'\r\n                                            style = {{color : 'gray'}}  \r\n                                        />\r\n                                    }\r\n                                    placeholder = 'nombre'  \r\n                                />\r\n                        )}\r\n                    </FormItem>\r\n                    <FormItem>\r\n                        {getFieldDecorator('last_name', {\r\n                        initialValue : this.props.ln,\r\n                        rules: [{\r\n                            required: true, message: 'debes ingresar tu apellido',\r\n                        }],\r\n                        })(\r\n                        <Input\r\n                            type=\"text\"\r\n                            \r\n                            size = 'large'\r\n                            prefix = {<Icon type = 'user' style = {{color : 'gray'}} />}\r\n                            placeholder = 'apellido'     \r\n                        />\r\n                        )}\r\n                    </FormItem>\r\n\r\n                    <FormItem>\r\n                        <Button\r\n                            type = \"primary\"\r\n                            className = 'button-login-register'\r\n\r\n                            loading = {this.state.loading}\r\n                            disabled = {hasErrors(this.props.form.getFieldsError())}\r\n                            htmlType = 'submit'>\r\n                            Cambiar\r\n                        </Button>\r\n                    </FormItem>\r\n                    </Form>\r\n                </CardBody>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nconst WrappedChangeNamesForm = Form.create()(ModifyNamesComponent)\r\n\r\nexport default WrappedChangeNamesForm\r\n","import React, { Component } from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport ImageProfile from './ImageProfile'\r\nimport FormPassword from './ModiFyPasswordComponent'\r\nimport FormNames from './ModifyNames'\r\n\r\nclass Profile extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <Row className=\"justify-content-center\">\r\n          <Col xs=\"12\" lg=\"0\">\r\n            <ImageProfile\r\n              image = { this.props.image }\r\n              setUser = { this.props.setUser }\r\n            />\r\n            <FormNames\r\n              reset_names = { this.props.reset_names }\r\n              fn = { this.props.fn }\r\n              ln = { this.props.ln }\r\n            />\r\n            <FormPassword\r\n              reset_pass = { this.props.reset_pass }\r\n            />\r\n          </Col>           \r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Profile from '../../../components/Profile'\r\nimport { setUser } from './../../../actions/LoginRegisterAction'\r\nimport { resetPassword } from './../../../actions/PanelActions'\r\nimport { resetNames } from './../../../actions/PanelActions'\r\n\r\nclass ProfileView extends Component {\r\n  render() {\r\n    return (\r\n      <Profile\r\n        image = { this.props.ImageUrl }\r\n        setUser = { this.props.setUser }\r\n        reset_pass = { this.props.resetPassword }\r\n        reset_names = { this.props.resetNames }\r\n        fn = { this.props.first_name }\r\n        ln = { this.props.last_name }\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  ImageUrl : state.data_user.imageUrl,\r\n  first_name : state.data_user.first_name,\r\n  last_name : state.data_user.last_name,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  setUser,\r\n  resetPassword,\r\n  resetNames\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileView)\r\n"],"sourceRoot":""}